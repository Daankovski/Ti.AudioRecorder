/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.daan.audiorecorder;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.media.MediaRecorder;


@Kroll.module(name="Audiorecorder", id="com.daan.audiorecorder")
public class AudiorecorderModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "AudiorecorderModule";
	
	// output format constants
	@Kroll.constant public static final int OutputFormat_MPEG_4 = MediaRecorder.OutputFormat.MPEG_4;
	@Kroll.constant public static final int OutputFormat_THREE_GPP = MediaRecorder.OutputFormat.THREE_GPP;
	@Kroll.constant public static final int OutputFormat_DEFAULT = MediaRecorder.OutputFormat.MPEG_4;

	//audio encoder
	@Kroll.constant public static final int AudioEncoder_AAC = MediaRecorder.AudioEncoder.AAC;
	@Kroll.constant public static final int AudioEncoder_AMR_NB = MediaRecorder.AudioEncoder.AMR_NB;
	@Kroll.constant public static final int AudioEncoder_AMR_WB = MediaRecorder.AudioEncoder.AMR_WB;
	@Kroll.constant public static final int AudioEncoder_DEFAULT = MediaRecorder.AudioEncoder.AAC;
	
	@Kroll.constant public static final int AudioEncodingBitRate_DEFAULT = 96000;
	@Kroll.constant public static final int AudioSamplingRate_DEFAULT = 44100; 
	
	private MediaRecorder recorder = null;
	private String fullFileName = null;
	private String outputFileName = null;
	private Boolean recording = false;
	private String AUDIO_RECORDER_FOLDER = "Recordings";
		
	int fileFormat = 0;
	int audioEncoder = 0;
	int audioEncodingBitRate = 0;
	int audioSamplingRate = 0;
	
	String outputPath = null;
	String directoryName = null;
	
	File audioDirectory = null;
	
	String name = null;
	String size = null;
	String path = null;
	

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public AudiorecorderModule()
	{
		super();
	}
	
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created	
	}
	
	private String getFilename(int selectedFormat, String selectedFileName, String selectedDirName, String location){
		
		directoryName = AUDIO_RECORDER_FOLDER;
		if (selectedDirName != null && selectedDirName.length() > 0) {
			directoryName = selectedDirName;
		}
					
		String fileName = "Recording";
		if(selectedFileName != null && selectedFileName.length() > 0){
			fileName = selectedFileName;
		}
		
		String fileFormat = ".3gp";
		if(selectedFormat == OutputFormat_THREE_GPP){
			fileFormat = ".3gp";
		} else if(selectedFormat == OutputFormat_MPEG_4){
			fileFormat = ".m4a";
		}
		
		outputFileName = fileName + fileFormat;
		
		if(location.equals("internal")){
			audioDirectory = TiApplication.getAppRootOrCurrentActivity().getDir(directoryName, Context.MODE_WORLD_READABLE);
			if(!audioDirectory.exists()){
				audioDirectory.mkdirs();
			}
			fullFileName = (audioDirectory.getAbsolutePath() + "/" + outputFileName);
			return fullFileName;		
		}else if(location.equals("temp")){
			audioDirectory = new File(TiApplication.getAppRootOrCurrentActivity().getExternalCacheDir(), directoryName);
			if(!audioDirectory.exists()){
				audioDirectory.mkdirs();
			}
			System.out.println("audioDirectory path : " + audioDirectory.getAbsolutePath());
			fullFileName = (audioDirectory.getAbsolutePath() + "/" + outputFileName);
			return fullFileName;
		}else {
			return null;
		}		
}
	
	@Kroll.method
	public void configRecorder(HashMap args){
		KrollDict options = new KrollDict(args);
			
		fileFormat = options.optInt("outputFormat", OutputFormat_MPEG_4);
		audioEncoder = options.optInt("audioEncoder", AudioEncoder_AAC);
		audioEncodingBitRate = options.optInt("audioEncodingBitRate", 96000);
		audioSamplingRate = options.optInt("audioSamplingRate", 44100);
		String fileLocation = options.optString("fileLocation", "temp");
		
		String fileName = (String) options.get("fileName");
		String fileDirectory = (String) options.get("directoryName");
		fileLocation = (String)options.get("fileLocation");
		audioEncodingBitRate = (int) options.get("audioEncodingBitRate");
		
		outputPath = getFilename(fileFormat, fileName, fileDirectory, fileLocation);
		
		if(outputPath == null || outputPath == ""){
			return;
		}
	}
	
	@Kroll.method
	public void start(){
		if(recording){
			System.out.println("Another audio record is inprogress");
		} else {
			
			recorder = null;
						
			recorder = new MediaRecorder();
			recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			recorder.setOutputFormat(fileFormat);
			recorder.setAudioEncoder(audioEncoder);
			recorder.setAudioChannels(1);
			recorder.setAudioSamplingRate(audioSamplingRate);
			recorder.setAudioEncodingBitRate(audioEncodingBitRate);
			
			recorder.setOutputFile(outputPath);
			
			try {
				recorder.prepare();
				recorder.start();
				recording = true;
			} catch(IOException e) {
				e.printStackTrace();
				recording = false;
			} catch(IllegalStateException e){
				e.printStackTrace();
				recording = false;
			}			
		}		
	}
	
	@Kroll.method
	public void stop(){
		if(null != recorder){
			try{
				recorder.stop();
			}catch(IllegalStateException e){
				e.printStackTrace();
			}
			recorder.reset();
			recorder.release();
			recorder = null;
			recording = false;
			System.out.println("File is saved @ " + "" + outputPath);
			
			File recording = new File(audioDirectory.getAbsolutePath(), outputFileName);
			
			name = recording.getName();
			size = String.valueOf(recording.length());
			path = recording.getAbsolutePath();
		}
	}
	
	@Kroll.method @Kroll.getProperty
	public Boolean recording(){
		return recording;
	}
	
	@Kroll.method @Kroll.getProperty
	public String locationString(){
		return outputPath;
	}
	
	@Kroll.method @Kroll.getProperty
	public String fileName(){
		return name;
	}
	@Kroll.method @Kroll.getProperty
	public String fileSize(){
		return size;
	}
	@Kroll.method @Kroll.getProperty
	public String filePath(){
		return path;
	}

}

